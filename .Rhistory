select(Species, Block, Density, Cover.Native, Height.Native, Cover.Phrag)
final.biomass <- biomass %>%
filter(Phrag_Presence == "W") %>%
select(Species, Block, Density, Native.Biomass, Phrag.Biomass)
final.all <- left_join(final.traits, final.biomass, by = c("Species", "Density", "Block"))
View(final.all)
View(final.all)
lm_cover_height <- lm(Cover.Phrag ~ Height.Native, data = final.all)
summary(lm_cover_height)
lm_cover_biomass <- lm(Cover.Phrag ~ Native.Biomass, data = final.all)
summary(lm_cover_biomass)
lm_cover_cover <- lm(Cover.Phrag ~ Cover.Native, data = final.all)
summary(lm_cover_cover)
lm_biomass_height <- lm(Phrag.Biomass ~ Height.Native, data = final.all)
summary(lm_biomass_height)
lm_biomass_biomass <- lm(Phrag.Biomass ~ Native.Biomass, data = final.all)
summary(lm_biomass_biomass)
lm_biomass_cover <- lm(Phrag.Biomass ~ Cover.Native, data = final.all)
summary(lm_biomass_cover)
#Native cover
mdf <- greenhouse %>%
filter(!is.na(Density),
Date_Cleaned == "2022-05-16",
Species != "JUTO" & Species != "JUGE"  & Species != "SCAM" & Species != "BOMA")
load("main_dfs.RData")
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
greenhouse$Density <- as.factor(greenhouse$Density)
greenhouse$Phrag_Presence <- as.factor(greenhouse$Phrag_Presence)
greenhouse$Species <- as.factor(greenhouse$Species)
#this is for the type of test - needed for Type III test - also required you to use Anova () in car package
options(contrasts = c("contr.sum", "contr.poly"))
##Example
#model for a single species - the mean of native height WO and W, and Date
henu <- greenhouse %>%
filter(Species == "HENU", !is.na(Density),
Date == "2022-05-16" | Date == "2022-05-17")
henu.m1 <- glmmTMB(log(Height.Native) ~ Phrag_Presence * Density #* for interaction
+ (1|Block),
data = henu,
family = gaussian
)
summary(henu.m1)
load("main_dfs.RData")
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library (gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
greenhouse$Density <- as.factor(greenhouse$Density)
greenhouse$Species <- as.factor(greenhouse$Species)
mdf <- greenhouse %>%
filter(Species != "PHAU", Phrag_Presence == "W",
Date_Cleaned == "2022-05-16")
mdf.m1 <- glmmTMB(Cover.Phrag ~ Species * Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family #change the family to beta
)
summary(mdf.m1)
ranef(mdf.m1
)
# Load required libraries
# devtools::install_github("jslefche/piecewiseSEM@devel") # version 2.3.0
library(piecewiseSEM)
install.packages("piecewiseSEM")
install.packages("lavaan")
# Load required libraries
# devtools::install_github("jslefche/piecewiseSEM@devel") # version 2.3.0
library(piecewiseSEM)
library(lavaan)
# Load Keeley data set
data(keeley)
# Examine Keeley data
head(keeley)
# Break down component regressions
abiotic_model <- lm(abiotic ~ distance, data = keeley)
hetero_model <- lm(hetero ~ distance, data = keeley)
richness_model <- lm(rich ~ abiotic + hetero, data = keeley)
# Use the `psem` function to create the SEM
model <- psem(abiotic_model, hetero_model, richness_model)
# Look at object
model
# Step 1: conduct tests of directed separation
# Establish the basis set & evaluate independence claims
# Missing path #1:
dsep1 <- lm(abiotic ~ hetero + distance, data = keeley)
# Missing path #2:
dsep2 <- lm(rich ~ distance + abiotic + hetero, data = keeley)
# Get P-values
P1 <- summary(dsep1)$coefficients[2, "Pr(>|t|)"]
P2 <- summary(dsep2)$coefficients[2, "Pr(>|t|)"]
# Construct C-statistic
C <- -2 * (log(P1) + log(P2))
C
# Compare to chi-squared distribution with 2*2 degrees of freedom
1 - pchisq(C, 4) # P < 0.05 == poor fit!
# Can use `dsep` function to perform the tests automagically
dSep(model)
# Can use `fisherC` function to evaluate claims
fisherC(model)
# The relationship between rich and distance is significant
# Re-introduce to the model
model2 <- update(model, rich ~ abiotic + hetero + distance)
model2
dSep(model2) # only 1 claim now
fisherC(model2) # P > 0.05 == model fits well!
# Get coefficients from good-fitting SEM
coefs(model2)
# Plot SEM with standardized coefficients
plot(model2)
# Use `summary` function to get all information at once
summary(model2)
summary(model)
# Sum Log-likelihoods from original model
LL_sem <- sum(sapply(model2[-4], logLik))
# Fit saturated model
saturated_model <- psem(
lm(abiotic ~ distance + hetero, data = keeley),
lm(hetero ~ distance, data = keeley),
lm(rich ~ abiotic + hetero + distance, data = keeley)
)
# Sum Log-likelihoods from saturated model
LL_sat <- sum(sapply(saturated_model[-4], logLik))
Chi_sq <- -2 * (LL_sem - LL_sat)
Chi_sq
# Compare to chi-squared distribution with 1 df (one additional estimated
# parameter in saturated model)
1 - pchisq(Chi_sq, 1) # P > 0.05 == good fit!
fisherC(model2) # slightly different than P-value from Fisher's C
# Re-fit in lavaan
library(lavaan)
form <- '
abiotic ~ distance
hetero ~ distance
rich ~ abiotic + hetero + distance
'
sem(form, keeley) # same P-value!
# Can we test whether the model with the distance -> rich path
# is statistically better?
AIC(model, model2)
anova(model, model2) # Chi-square difference test
# Re-fit Keeley example with GLM
model3 <- psem(
lm(abiotic ~ distance, data = keeley),
lm(hetero ~ distance, data = keeley),
glm(rich ~ abiotic + hetero + distance, family = poisson(link = "log"),
data = keeley)
)
# Get summary
summary(model3)
# Compare with SEM of just LM
anova(model2, model3) # GLM actually is less likely!
# Imagine that distance -> hetero relationship is truly nonlinear
# Re-fit SEM using generalized additive model (GAM)
library(mgcv)
model4 <- psem(
lm(abiotic ~ distance, data = keeley),
gam(hetero ~ s(distance), data = keeley),
glm(rich ~ abiotic + hetero + distance, family = poisson(link = "log"),
data = keeley)
)
# Get summary
summary(model4)
#I only want the values for the end
final.traits <- greenhouse %>%
filter(Date_Cleaned == "2022-05-16" & Phrag_Presence == "W") %>%
select(Species, Block, Density, Cover.Native, Height.Native, Cover.Phrag)
#I only want the values for the end
library(dplyr)
final.traits <- greenhouse %>%
filter(Date_Cleaned == "2022-05-16" & Phrag_Presence == "W") %>%
select(Species, Block, Density, Cover.Native, Height.Native, Cover.Phrag)
final.biomass <- biomass %>%
filter(Phrag_Presence == "W") %>%
select(Species, Block, Density, Native.Biomass, Phrag.Biomass)
final.all <- left_join(final.traits, final.biomass, by = c("Species", "Density", "Block"))
#now make the models for each piece
biomass_model <- lm(Biomass.Native ~ Density, data = final.all)
View(final.all)
#now make the models for each piece
biomass_model <- lm(Native.Biomass ~ Density, data = final.all)
height_model <- lm(Height.Native ~ Density, data = final.all)
cover_model <- lm(Cover.Native ~ Density, data = final.all)
phrag_cover <- lm(Cover.Phrag ~ Cover.Native + Height.Native + Native.Biomass + Density, data = final.all)
model <- psem(biomass_model, height_model, cover_model, phrag_cover)
final.all[final.all == NA]
final.all[final.all == NA] <- 0
final.all$Cover.Native[final.all$Cover.Native == NA] <- 0
final.all$Cover.Native[is.na(final.all$Cover.Native)] <- 0
final.all$Height.Native[is.na(final.all$Height.Native)] <- 0
final.all$Native.Biomass[is.na(final.all$Native.Biomass)] <- 0
final.all$Cover.Phrag[is.na(final.all$Cover.Phrag)] <- 0
#now make the models for each piece
biomass_model <- lm(Native.Biomass ~ Density, data = final.all)
height_model <- lm(Height.Native ~ Density, data = final.all)
cover_model <- lm(Cover.Native ~ Density, data = final.all)
phrag_cover <- lm(Cover.Phrag ~ Cover.Native + Height.Native + Native.Biomass + Density, data = final.all)
model <- psem(biomass_model, height_model, cover_model, phrag_cover)
summary(model)
plot(model)
coefs(model)
plot(model)
summary(model)
#need to add in these models too because came up as significant
m1 <- lm(Height.Native ~ Native.Biomass + Cover.Native, data = final.all)
m2 <- lm(Cover.Native ~ Native.Biomass + Height.Native, data = final.all)
model <- psem(biomass_model, height_model, cover_model, phrag_cover, m1, m2)
#now make the models for each piece
biomass_model <- lm(Native.Biomass ~ Density, data = final.all)
height_model <- lm(Height.Native ~ Density + Native.Biomass, data = final.all)
cover_model <- lm(Cover.Native ~ Density + Native.Biomass + Height.Native, data = final.all)
phrag_cover <- lm(Cover.Phrag ~ Cover.Native + Height.Native + Native.Biomass + Density, data = final.all)
model <- psem(biomass_model, height_model, cover_model, phrag_cover)
summary(model)
plot(model)
# Plot SEM with standardized coefficients
plot(model2)
# Get coefficients from good-fitting SEM
coefs(model2)
coef(model)
coefs(model)
summary(model)
# Load required libraries
# devtools::install_github("jslefche/piecewiseSEM@devel") # version 2.3.0
library(piecewiseSEM)
library(lavaan)
library(dplyr)
final.traits <- greenhouse %>%
filter(Date_Cleaned == "2022-05-16" & Phrag_Presence == "W") %>%
select(Species, Block, Density, Cover.Native, Height.Native, Cover.Phrag)
final.biomass <- biomass %>%
filter(Phrag_Presence == "W") %>%
select(Species, Block, Density, Native.Biomass, Phrag.Biomass)
final.all <- left_join(final.traits, final.biomass, by = c("Species", "Density", "Block"))
final.all$Cover.Native[is.na(final.all$Cover.Native)] <- 0
final.all$Height.Native[is.na(final.all$Height.Native)] <- 0
final.all$Native.Biomass[is.na(final.all$Native.Biomass)] <- 0
final.all$Cover.Phrag[is.na(final.all$Cover.Phrag)] <- 0
#now make the models for each piece
biomass_model <- lm(Native.Biomass ~ Density, data = final.all)
height_model <- lm(Height.Native ~ Density + Native.Biomass, data = final.all)
cover_model <- lm(Cover.Native ~ Density + Native.Biomass + Height.Native, data = final.all)
phrag_cover <- lm(Cover.Phrag ~ Cover.Native + Height.Native + Native.Biomass + Density, data = final.all)
model <- psem(biomass_model, height_model, cover_model, phrag_cover)
summary(model)
coefs(model)
lm_biomass_biomass <- lm(Phrag.Biomass ~ Native.Biomass + Density, data = final.all)
load("main_dfs.RData")
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library (gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
greenhouse$Density <- as.factor(greenhouse$Density)
greenhouse$Species <- as.factor(greenhouse$Species)
#using the full dataset
final.traits <- greenhouse %>%
filter(Date_Cleaned == "2022-05-16" & Phrag_Presence == "W") %>%
select(Species, Block, Density, Cover.Native, Height.Native, Cover.Phrag)
final.biomass <- biomass %>%
filter(Phrag_Presence == "W") %>%
select(Species, Block, Density, Native.Biomass, Phrag.Biomass)
final.all <- left_join(final.traits, final.biomass, by = c("Species", "Density", "Block"))
lm_biomass_biomass <- lm(Phrag.Biomass ~ Native.Biomass + Density, data = final.all)
summary(lm_biomass_biomass)
lm_cover_height <- lm(Cover.Phrag ~ Height.Native + Density, data = final.all)
summary(lm_cover_height)
lm_cover_height <- lm(Cover.Phrag ~ Height.Native, data = final.all)
summary(lm_cover_height)
lm_cover_height <- lm(Cover.Phrag ~ Height.Native + Density, data = final.all)
summary(lm_cover_height)
lm_cover_biomass <- lm(Cover.Phrag ~ Native.Biomass + Density, data = final.all)
summary(lm_cover_biomass)
lm_cover_cover <- lm(Cover.Phrag ~ Cover.Native + Density, data = final.all)
summary(lm_cover_cover)
lm_biomass_height <- lm(Phrag.Biomass ~ Height.Native + Density, data = final.all)
summary(lm_biomass_height)
lm_biomass_cover <- lm(Phrag.Biomass ~ Cover.Native + Density, data = final.all)
summary(lm_biomass_cover)
lm_cover_height <- lm(Cover.Phrag ~ Height.Native + Density, data = final.all)
summary(lm_cover_height)
summary(lm_cover_height)
summary(lm_cover_biomass)
summary(lm_cover_cover)
summary(lm_biomass_height)
summary(lm_biomass_biomass)
summary(lm_biomass_cover)
load("main_dfs.RData")
library(magrittr)
load("main_dfs.RData")
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library (gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
greenhouse$Density <- as.factor(greenhouse$Density)
greenhouse$Species <- as.factor(greenhouse$Species)
mdf <- greenhouse %>%
filter(Species != "PHAU", Phrag_Presence == "W",
Date_Cleaned == "2022-05-16")
mdf.m1 <- glmmTMB(Cover.Phrag ~ Species * Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family #change the family to beta
)
summary(mdf.m1)
ranef(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$Species)
#library(car)
car::Anova(mdf.m1)
emmip(mdf.m1, Species~Density, CIs = T)
#to see which species Density mattered for - but results don't match what I would have expected?
emmeans(mdf.m1, pairwise ~ Density | Species)
emm <- emmeans(mdf.m1, pairwise ~ Species, adjust = "tukey", type = "response")
pwpm(emm)
data1 <- multcomp::cld(emm$emmeans, alpha = 0.05, Letters = letters)
data1
##Model to run for biomass
mdf <- biomass %>%
filter(Species != "PHAU", Phrag_Presence == "W")
mdf.m1 <- glmmTMB(sqrt(Phrag.Biomass) ~ Species * Density #* for interaction
+ (1|Block),
data = mdf,
family = gaussian
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$Density)
#library(car)
Anova(mdf.m1)
emmip(mdf.m1, Species~Density, CIs = T)
emm <- emmeans(mdf.m1, pairwise ~ Species, adjust = "tukey", type = "response")
data1 <- multcomp::cld(emm, alpha = 0.05, letters = letters)
emm <- emmeans(mdf.m1, pairwise ~ Species, adjust = "tukey", type = "response")
data1 <- multcomp::cld(emm, alpha = 0.05, letters = letters)
summary(mdf.m1)
ranef(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$Species)
#library(car)
car::Anova(mdf.m1)
emmip(mdf.m1, Species~Density, CIs = T)
load("main_dfs.RData")
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library (gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
greenhouse$Density <- as.factor(greenhouse$Density)
greenhouse$Species <- as.factor(greenhouse$Species)
mdf <- greenhouse %>%
filter(Species != "PHAU", Phrag_Presence == "W",
Date_Cleaned == "2022-05-16")
mdf.m1 <- glmmTMB(Cover.Phrag ~ Species * Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family #change the family to beta
)
summary(mdf.m1)
ranef(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$Species)
#to see which species Density mattered for - but results don't match what I would have expected?
emmeans(mdf.m1, pairwise ~ Density | Species)
emm <- emmeans(mdf.m1, pairwise ~ Species, adjust = "tukey", type = "response")
pwpm(emm)
data1 <- multcomp::cld(emm$emmeans, alpha = 0.05, Letters = letters)
data1
##Model to run for biomass
mdf <- biomass %>%
filter(Species != "PHAU", Phrag_Presence == "W")
mdf.m1 <- glmmTMB(sqrt(Phrag.Biomass) ~ Species * Density #* for interaction
+ (1|Block),
data = mdf,
family = gaussian
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$Density)
#library(car)
Anova(mdf.m1)
emmip(mdf.m1, Species~Density, CIs = T)
emm <- emmeans(mdf.m1, pairwise ~ Species, adjust = "tukey", type = "response")
data1 <- multcomp::cld(emm, alpha = 0.05, letters = letters)
emm <- emmeans(mdf.m1, pairwise ~ Species, adjust = "tukey", type = "response")
data1 <- multcomp::cld(emm, alpha = 0.05, letters = letters)
load("main_dfs.RData")
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library (gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
greenhouse$Density <- as.factor(greenhouse$Density)
greenhouse$Species <- as.factor(greenhouse$Species)
mdf <- greenhouse %>%
filter(Species != "PHAU", Phrag_Presence == "W",
Date_Cleaned == "2022-05-16")
#see what variables have missing values
mdf %>%
select(Cover.Phrag, Species, Density, Block) %>%
summarise_all(list(~sum(is.na(.))))
#drop observations with NA Cover.Phrag and refactor so that level is dropped
with(mdf, table(Species, useNA = "ifany"))
mdf$Cover.Phrag
View(mdf)
#drop observations with NA Cover.Phrag and refactor so that level is dropped
with(mdf, table(Species, useNA = "ifany")) #no observations for PHAU
mdf <- mdf %>%
drop_na(Cover.Phrag) %>%
mutate(Species = factor(Species))
load("main_dfs.RData")
library(magrittr)
library(dplyr)
library(ggplot2)
library(glmmTMB) #allows us to use a beta distribution
library(DHARMa)
library(emmeans)
library(car)
library(multcompView)
library(gridExtra)
options(contrasts = c("contr.sum", "contr.poly"))
greenhouse$Density <- as.factor(greenhouse$Density)
greenhouse$Species <- as.factor(greenhouse$Species)
mdf <- greenhouse %>%
filter(Species != "PHAU", Phrag_Presence == "W",
Date_Cleaned == "2022-05-16")
#see what variables have missing values
mdf %>%
select(Cover.Phrag, Species, Density, Block) %>%
summarise_all(list(~sum(is.na(.))))
#drop observations with NA Cover.Phrag and refactor so that level is dropped
with(mdf, table(Species, useNA = "ifany")) #no observations for PHAU
mdf <- mdf %>%
drop_na(Cover.Phrag) %>%
mutate(Species = factor(Species))
library(tidyverse)
mdf <- mdf %>%
drop_na(Cover.Phrag) %>%
mutate(Species = factor(Species))
with(mdf, table(Species, useNA = "ifany")) #note absence of Phrag level
#back to model
mdf.m1 <- glmmTMB(Cover.Phrag ~ Species * Density #* for interaction
+ (1|Block),
data = mdf,
family = beta_family #change the family to beta
)
summary(mdf.m1)
ranef(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$Species)
#library(car)
car::Anova(mdf.m1)
emmip(mdf.m1, Species~Density, CIs = T)
#to see which species Density mattered for - but results don't match what I would have expected?
emmeans(mdf.m1, pairwise ~ Density | Species)
emm <- emmeans(mdf.m1, pairwise ~ Species, adjust = "tukey", type = "response")
pwpm(emm)
data1 <- multcomp::cld(emm$emmeans, alpha = 0.05, Letters = letters)
data1
##Model to run for biomass
mdf <- biomass %>%
filter(Species != "PHAU", Phrag_Presence == "W")
mdf.m1 <- glmmTMB(sqrt(Phrag.Biomass) ~ Species * Density #* for interaction
+ (1|Block),
data = mdf,
family = gaussian
)
summary(mdf.m1)
simulateResiduals(mdf.m1, plot = T)
plotResiduals(mdf.m1, form= mdf$Density)
#library(car)
Anova(mdf.m1)
emmip(mdf.m1, Species~Density, CIs = T)
emm <- emmeans(mdf.m1, pairwise ~ Species, adjust = "tukey", type = "response")
data1 <- multcomp::cld(emm, alpha = 0.05, letters = letters)
emm
data1 <- multcomp::cld(emm$emmeans, alpha = 0.05, letters = letters)
data1
data1 <- multcomp::cld(emm$emmeans, alpha = 0.05, Letters = letters)
data1
